return(game.list)
}
select.cards <- function(game, card.1, card.2) {
if(card.1 == card.2) {
return(list(game = game, message = "Please choose different cards!", valid = FALSE))
}
if(card.1 > length(game[["open"]]) || card.2 > length(game[["open"]])) {
return(list(game = game, message = "Invalid card selection!", valid = FALSE))
}
if(game[["open"]][card.1] == "solved") {
return(list(game = game, message = "Card already solved!", valid = FALSE))
}
if(game[["open"]][card.2] == "solved") {
return(list(game = game, message = "Card already solved!", valid = FALSE))
}
if(is.null(game[["time1"]])) {game[["time1"]] <- Sys.time()}
game[["time2"]] <- Sys.time() - game[["time1"]]
# Temporarily reveal both cards
game[["revealed"]][card.1] <- TRUE
game[["revealed"]][card.2] <- TRUE
message <- ""
matched <- FALSE
if(game[["open"]][card.1] == game[["open"]][card.2]) {
# It's a match - mark as solved
game[["open"]][c(card.1, card.2)] <- "solved"
game[["hidden"]][c(card.1, card.2)] <- "solved"
message <- "It's a match! ✓"
matched <- TRUE
} else {
message <- "No match! Cards will flip back in 2 seconds..."
matched <- FALSE
}
game[["moves"]] <- game[["moves"]] + 1
win <- all(game[["open"]] == "solved")
if(win) {
message <- paste("🎉 YOU WIN! 🎉\nMoves:", game[["moves"]], "\nTime:", round(as.numeric(game[["time2"]]), 2), "seconds")
}
return(list(game = game, message = message, valid = TRUE, matched = matched, win = win))
}
# Custom CSS for card styling
card_css <- "
.card-container {
display: grid;
grid-template-columns: repeat(4, 1fr);
gap: 10px;
max-width: 400px;
margin: 20px auto;
}
.memory-card {
width: 80px;
height: 80px;
border: 2px solid #333;
border-radius: 8px;
display: flex;
align-items: center;
justify-content: center;
font-size: 24px;
font-weight: bold;
cursor: pointer;
transition: all 0.3s ease;
user-select: none;
}
.memory-card:hover {
transform: scale(1.05);
box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}
.card-hidden {
background: linear-gradient(45deg, #3498db, #2980b9);
color: white;
}
.card-revealed {
background: linear-gradient(45deg, #e74c3c, #c0392b);
color: white;
}
.card-solved {
background: linear-gradient(45deg, #27ae60, #2ecc71);
color: white;
}
.game-message {
text-align: center;
font-size: 18px;
font-weight: bold;
margin: 20px 0;
min-height: 50px;
}
.stats-box {
text-align: center;
font-size: 16px;
margin: 10px 0;
}
"
# UI
ui <- fluidPage(
tags$head(
tags$style(HTML(card_css))
),
titlePanel("🎮 Memory Card Game"),
fluidRow(
column(4,
wellPanel(
h4("🎯 Game Controls"),
actionButton("new_game", "🔄 New Game",
class = "btn-primary btn-lg",
style = "width: 100%; margin-bottom: 15px;"),
div(class = "stats-box",
h5("📊 Game Stats"),
verbatimTextOutput("stats")
),
div(
h5("📋 Instructions"),
tags$ul(
tags$li("Click 'New Game' to start"),
tags$li("Click on cards to reveal them"),
tags$li("Find matching pairs"),
tags$li("Match all pairs to win!")
)
)
)
),
column(8,
div(class = "game-message",
textOutput("message")
),
div(class = "card-container",
uiOutput("game_cards")
)
)
)
)
# Server
server <- function(input, output, session) {
values <- reactiveValues(
game = NULL,
selected_cards = c(),
message = "Click 'New Game' to start! 🚀",
temp_revealed = c()  # For temporarily showing non-matching cards
)
# Start new game
observeEvent(input$new_game, {
values$game <- set.game.4by4()
values$selected_cards <- c()
values$temp_revealed <- c()
values$message <- "Game started! Click on two cards to find matching pairs. 🃏"
})
# Handle card clicks
observe({
if(is.null(values$game)) return()
# Listen for card clicks (card_1, card_2, ..., card_16)
for(i in 1:16) {
local({
card_num <- i
observeEvent(input[[paste0("card_", card_num)]], {
if(is.null(values$game)) return()
# Check if card is already solved or currently revealed
if(values$game[["open"]][card_num] == "solved") return()
if(card_num %in% values$selected_cards) return()
# First card selection
if(length(values$selected_cards) == 0) {
values$selected_cards <- card_num
values$temp_revealed <- card_num
values$message <- paste("Card", card_num, "selected. Choose another card! 🎯")
# Second card selection
} else if(length(values$selected_cards) == 1) {
values$selected_cards <- c(values$selected_cards, card_num)
values$temp_revealed <- values$selected_cards
# Process the move
result <- select.cards(values$game, values$selected_cards[1], card_num)
if(result$valid) {
values$game <- result$game
values$message <- result$message
# If no match, hide cards after delay
if(!result$matched && !result$win) {
invalidateLater(2000, session)
later::later(function() {
values$temp_revealed <- c()
values$selected_cards <- c()
if(!result$win) {
values$message <- "Choose two cards to reveal them! 🃏"
}
}, delay = 2)
} else {
# If match or win, clear selection immediately
values$temp_revealed <- c()
values$selected_cards <- c()
}
} else {
values$message <- result$message
values$temp_revealed <- c()
values$selected_cards <- c()
}
}
})
})
}
})
# Generate clickable cards
output$game_cards <- renderUI({
if(is.null(values$game)) {
return(div(style = "text-align: center; font-size: 18px; color: #666;",
"Click 'New Game' to start playing! 🎮"))
}
cards <- list()
for(i in 1:4) {
for(j in 1:4) {
card_num <- (i-1)*4 + j
# Determine card state and content
if(values$game[["open"]][card_num] == "solved") {
# Solved cards show the letter
card_class <- "memory-card card-solved"
card_content <- paste(values$game[["open"]][card_num], "✓")
} else if(card_num %in% values$temp_revealed) {
# Temporarily revealed cards
card_class <- "memory-card card-revealed"
card_content <- values$game[["open"]][card_num]
} else {
# Hidden cards show card number
card_class <- "memory-card card-hidden"
card_content <- card_num
}
cards[[card_num]] <- actionButton(
inputId = paste0("card_", card_num),
label = card_content,
class = card_class,
style = "border: none; margin: 0; padding: 0;"
)
}
}
do.call(tagList, cards)
})
# Display game message
output$message <- renderText({
values$message
})
# Display game statistics
output$stats <- renderText({
if(is.null(values$game)) {
return("No game in progress")
}
stats <- paste("Moves:", values$game$moves)
if(!is.null(values$game$time2)) {
stats <- paste(stats, "\nTime:", round(as.numeric(values$game$time2), 2), "sec")
}
# Calculate progress
solved_count <- sum(values$game[["open"]] == "solved")
stats <- paste(stats, "\nPairs found:", solved_count/2, "/ 8")
stats
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
# Game logic functions
set.game.4by4 <- function() {
game.open <- matrix(sample(c(LETTERS[1:8], LETTERS[1:8])), 4, 4)
game.hidden <- matrix(1:16, 4, 4)
n.moves <- 0
solving.time1 <- NULL
solving.time2 <- NULL
revealed <- matrix(FALSE, 4, 4)  # Track which cards are currently revealed
game.list <- list(game.open, game.hidden, n.moves, solving.time1, solving.time2, revealed)
names(game.list) <- c("open", "hidden", "moves", "time1", "time2", "revealed")
return(game.list)
}
select.cards <- function(game, card.1, card.2) {
if(card.1 == card.2) {
return(list(game = game, message = "Please choose different cards!", valid = FALSE))
}
if(card.1 > length(game[["open"]]) || card.2 > length(game[["open"]])) {
return(list(game = game, message = "Invalid card selection!", valid = FALSE))
}
if(game[["open"]][card.1] == "solved") {
return(list(game = game, message = "Card already solved!", valid = FALSE))
}
if(game[["open"]][card.2] == "solved") {
return(list(game = game, message = "Card already solved!", valid = FALSE))
}
if(is.null(game[["time1"]])) {game[["time1"]] <- Sys.time()}
game[["time2"]] <- Sys.time() - game[["time1"]]
# Temporarily reveal both cards
game[["revealed"]][card.1] <- TRUE
game[["revealed"]][card.2] <- TRUE
message <- ""
matched <- FALSE
if(game[["open"]][card.1] == game[["open"]][card.2]) {
# It's a match - mark as solved
game[["open"]][c(card.1, card.2)] <- "solved"
game[["hidden"]][c(card.1, card.2)] <- "solved"
message <- "It's a match! ✓"
matched <- TRUE
} else {
message <- "No match! Cards will flip back in 2 seconds..."
matched <- FALSE
}
game[["moves"]] <- game[["moves"]] + 1
win <- all(game[["open"]] == "solved")
if(win) {
message <- paste("🎉 YOU WIN! 🎉\nMoves:", game[["moves"]], "\nTime:", round(as.numeric(game[["time2"]]), 2), "seconds")
}
return(list(game = game, message = message, valid = TRUE, matched = matched, win = win))
}
# Custom CSS for card styling
card_css <- "
.card-container {
display: grid;
grid-template-columns: repeat(4, 1fr);
gap: 10px;
max-width: 400px;
margin: 20px auto;
}
.memory-card {
width: 80px;
height: 80px;
border: 2px solid #333;
border-radius: 8px;
display: flex;
align-items: center;
justify-content: center;
font-size: 24px;
font-weight: bold;
cursor: pointer;
transition: all 0.3s ease;
user-select: none;
}
.memory-card:hover {
transform: scale(1.05);
box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}
.card-hidden {
background: linear-gradient(45deg, #3498db, #2980b9);
color: white;
}
.card-revealed {
background: linear-gradient(45deg, #e74c3c, #c0392b);
color: white;
}
.card-solved {
background: linear-gradient(45deg, #27ae60, #2ecc71);
color: white;
}
.game-message {
text-align: center;
font-size: 18px;
font-weight: bold;
margin: 20px 0;
min-height: 50px;
}
.stats-box {
text-align: center;
font-size: 16px;
margin: 10px 0;
}
"
# UI
ui <- fluidPage(
tags$head(
tags$style(HTML(card_css))
),
titlePanel("🎮 Memory Card Game"),
fluidRow(
column(4,
wellPanel(
h4("🎯 Game Controls"),
actionButton("new_game", "🔄 New Game",
class = "btn-primary btn-lg",
style = "width: 100%; margin-bottom: 15px;"),
div(class = "stats-box",
h5("📊 Game Stats"),
verbatimTextOutput("stats")
),
div(
h5("📋 Instructions"),
tags$ul(
tags$li("Click 'New Game' to start"),
tags$li("Click on cards to reveal them"),
tags$li("Find matching pairs"),
tags$li("Match all pairs to win!")
)
)
)
),
column(8,
div(class = "game-message",
textOutput("message")
),
div(class = "card-container",
uiOutput("game_cards")
)
)
)
)
# Server
server <- function(input, output, session) {
values <- reactiveValues(
game = NULL,
selected_cards = c(),
message = "Click 'New Game' to start! 🚀",
temp_revealed = c()  # For temporarily showing non-matching cards
)
# Start new game
observeEvent(input$new_game, {
values$game <- set.game.4by4()
values$selected_cards <- c()
values$temp_revealed <- c()
values$message <- "Game started! Click on two cards to find matching pairs. 🃏"
})
# Handle card clicks
observe({
if(is.null(values$game)) return()
# Listen for card clicks (card_1, card_2, ..., card_16)
for(i in 1:16) {
local({
card_num <- i
observeEvent(input[[paste0("card_", card_num)]], {
if(is.null(values$game)) return()
# Check if card is already solved or currently revealed
if(values$game[["open"]][card_num] == "solved") return()
if(card_num %in% values$selected_cards) return()
# First card selection
if(length(values$selected_cards) == 0) {
values$selected_cards <- card_num
values$temp_revealed <- card_num
values$message <- paste("Card", card_num, "selected. Choose another card! 🎯")
# Second card selection
} else if(length(values$selected_cards) == 1) {
values$selected_cards <- c(values$selected_cards, card_num)
values$temp_revealed <- values$selected_cards
# Process the move
result <- select.cards(values$game, values$selected_cards[1], card_num)
if(result$valid) {
values$game <- result$game
values$message <- result$message
# If no match, hide cards after delay
if(!result$matched && !result$win) {
invalidateLater(2000, session)
later::later(function() {
values$temp_revealed <- c()
values$selected_cards <- c()
if(!result$win) {
values$message <- "Choose two cards to reveal them! 🃏"
}
}, delay = 2)
} else {
# If match or win, clear selection immediately
values$temp_revealed <- c()
values$selected_cards <- c()
}
} else {
values$message <- result$message
values$temp_revealed <- c()
values$selected_cards <- c()
}
}
})
})
}
})
# Generate clickable cards
output$game_cards <- renderUI({
if(is.null(values$game)) {
return(div(style = "text-align: center; font-size: 18px; color: #666;",
"Click 'New Game' to start playing! 🎮"))
}
cards <- list()
for(i in 1:4) {
for(j in 1:4) {
card_num <- (i-1)*4 + j
# Determine card state and content
if(values$game[["open"]][card_num] == "solved") {
# Solved cards show the letter
card_class <- "memory-card card-solved"
card_content <- paste(values$game[["open"]][card_num], "✓")
} else if(card_num %in% values$temp_revealed) {
# Temporarily revealed cards
card_class <- "memory-card card-revealed"
card_content <- values$game[["open"]][card_num]
} else {
# Hidden cards show card number
card_class <- "memory-card card-hidden"
card_content <- card_num
}
cards[[card_num]] <- actionButton(
inputId = paste0("card_", card_num),
label = card_content,
class = card_class,
style = "border: none; margin: 0; padding: 0;"
)
}
}
do.call(tagList, cards)
})
# Display game message
output$message <- renderText({
values$message
})
# Display game statistics
output$stats <- renderText({
if(is.null(values$game)) {
return("No game in progress")
}
stats <- paste("Moves:", values$game$moves)
if(!is.null(values$game$time2)) {
stats <- paste(stats, "\nTime:", round(as.numeric(values$game$time2), 2), "sec")
}
# Calculate progress
solved_count <- sum(values$game[["open"]] == "solved")
stats <- paste(stats, "\nPairs found:", solved_count/2, "/ 8")
stats
})
}
# Run the application
shinyApp(ui = ui, server = server)
